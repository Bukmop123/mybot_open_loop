    #include "ros/ros.h" 
    #include "std_msgs/Bool.h" 
    #include "std_msgs/String.h" 
    #include "geometry_msgs/Twist.h" 

    #include "sensor_msgs/Joy.h"
    #include <iostream> 

   class OperatorCommands
   {
   private:

	std_msgs::String str_;
	geometry_msgs::Twist robot_move_order_;
	ros::Publisher pub_str_;
	ros::Publisher pub_twist_;

   public:
	OperatorCommands(const ros::Publisher pub_str, const ros::Publisher pub_twist ) 
	{

	pub_str_ = pub_str;
	pub_twist_ = pub_twist;	

	}
	
    void JoyCallback(const sensor_msgs::Joy::ConstPtr& msg) 
    { 
	double axes[] = {msg->axes[0],msg->axes[1]};
	int buttons[] = {msg->buttons[0],
			msg->buttons[1],
			msg->buttons[2],
			msg->buttons[3],
			msg->buttons[4],
			msg->buttons[5],
			msg->buttons[6],
			msg->buttons[7],
			msg->buttons[8],
			msg->buttons[9]};
			
	
 	ROS_INFO("X: %f,Y: %f, ", axes[0],axes[1]);
  	ROS_INFO("B0: %d,B1: %d,B2: %d,B3: %d,B4: %d,B5: %d,B6: %d,B7: %d,B8: %d,B9: %d ",buttons[0],buttons[1],buttons[2],buttons[3],buttons[4],buttons[5],buttons[6],buttons[7],buttons[8],buttons[9]);
 
//	str_.data = "pub in jCB";

	//set data
	if(msg->axes[1] == 1)		{str_.data = "front";}
	else if(msg->axes[1] == -1)	{str_.data = "back";}
	else if(msg->axes[0] == 1) 	{str_.data = "left";}
	else if(msg->axes[0] == -1)	{str_.data = "right";}
	pub_str_.publish(str_);


	robot_move_order_.linear.x =axes[1] * 0.4;
	robot_move_order_.angular.z =axes[0] * 0.2;

	//publish
	pub_str_.publish(str_);
	pub_twist_.publish(robot_move_order_);
	pub_function();
    }

//here goes the code for the publisher
//    void pub_function(const sensor_msgs::Joy::ConstPtr& msg) 
    void pub_function() 
    {
	
	ROS_INFO("in sub function");

    }

	
};


     
 
    int main(int argc, char** argv) 
    { 
      ros::init(argc, argv,"operator_cmds_node"); 

 	ROS_INFO("in main");

      ros::NodeHandle n;
     
      //Publishers init
	ros::Publisher pub_str = n.advertise<std_msgs::String>("op_commands", 10);
	ros::Publisher pub_twist = n.advertise<geometry_msgs::Twist>("cmd_vel", 10);


	OperatorCommands OpCommand(pub_str, pub_twist);
      //Subscribers init
	ros::Subscriber sub =  n.subscribe("/human_input/joy",10, &OperatorCommands::JoyCallback ,&OpCommand); 

      ros::spin(); 
 
    } 
